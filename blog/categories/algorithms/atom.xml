<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithms | Ninan's Blog]]></title>
  <link href="http://zhangninan.github.io/blog/categories/algorithms/atom.xml" rel="self"/>
  <link href="http://zhangninan.github.io/"/>
  <updated>2016-11-10T18:40:57-05:00</updated>
  <id>http://zhangninan.github.io/</id>
  <author>
    <name><![CDATA[Ninan Zhang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Topological Sorting]]></title>
    <link href="http://zhangninan.github.io/blog/2016/11/10/topological-sorting/"/>
    <updated>2016-11-10T16:28:45-05:00</updated>
    <id>http://zhangninan.github.io/blog/2016/11/10/topological-sorting</id>
    <content type="html"><![CDATA[<p>Given an directed graph, a topological order of the graph nodes is defined as follow:</p>

<p>For each directed edge A -> B in graph, A must before B in the order list.
The first node in the order can be any node in the graph with no nodes direct to it.
Find any topological order for the given graph.</p>

<pre><code>Notice
You can assume that there is at least one topological
order in the graph.
</code></pre>

<p>Analyse:
入度为0的点拿出来做为第一个点。用hashmap来存一个点的入度。<br/>
1. Using hashmap to store every node&rsquo;s indegree;   <br/>
2. Find the node whose indegree is 0.   <br/>
3. BFS from the node. When traverse to a neighbor of the node, minus 1 the value of map[neighbor], when the value was minus to 0, add it to the queue and the result vector.</p>

<p>扩展：通过入度可以判断一个有向图有没有环。 环中所有点入度都不为0.</p>

<pre><code class="cpp">/**
 * Definition for Directed graph.
 * struct DirectedGraphNode {
 *     int label;
 *     vector&lt;DirectedGraphNode *&gt; neighbors;
 *     DirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    /**
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    vector&lt;DirectedGraphNode*&gt; topSort(vector&lt;DirectedGraphNode*&gt; graph) {
        unordered_map&lt;DirectedGraphNode*, int&gt; map;
        for(DirectedGraphNode* node : graph){
            for(DirectedGraphNode* neighbor: node-&gt;neighbors){
                if(map.find(neighbor) == map.end()){
                    map[neighbor] = 1;
                }
                else{
                    map[neighbor] = map[neighbor] + 1;
                }
            }
        }

        vector&lt;DirectedGraphNode*&gt; res;
        queue&lt;DirectedGraphNode*&gt; q;
        for(DirectedGraphNode* node : graph){
            if(map.find(node) == map.end()){
                q.push(node);
                res.push_back(node);
            }
        }


        while(q.size() != 0) {
            DirectedGraphNode* node = q.front(); q.pop();
            for(DirectedGraphNode* neighbor: node-&gt;neighbors){
                map[neighbor] -= 1;
                if(map[neighbor] == 0){
                    q.push(neighbor);
                    res.push_back(neighbor);
                }
            }
        }
        return res;  

    }
};
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clone Graph]]></title>
    <link href="http://zhangninan.github.io/blog/2016/11/06/clone-graph/"/>
    <updated>2016-11-06T18:32:33-05:00</updated>
    <id>http://zhangninan.github.io/blog/2016/11/06/clone-graph</id>
    <content type="html"><![CDATA[<p>Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.</p>

<p>How we serialize an undirected graph:</p>

<p>Nodes are labeled uniquely.</p>

<p>We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.</p>

<p>As an example, consider the serialized graph {0,1,2#1,2#2,2}.</p>

<p>The graph has a total of three nodes, and therefore contains three parts as separated by #.</p>

<ol>
<li>First node is labeled as 0. Connect node 0 to both nodes 1 and 2.</li>
<li>Second node is labeled as 1. Connect node 1 to node 2.</li>
<li>Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:</li>
</ol>


<pre><code>   1  
  / \  
 /   \
0 --- 2
     / \
     \_/
</code></pre>

<p><code>Analyse:</code><br/>
1. Find all nodes in the graph (BFS) <code>vector&lt;UndirectedGraphNode *&gt; findAllNodes(UndirectedGraphNode *node){}</code>
2. Deep copy the nodes  <code>void copyNodes(vector&lt;UndirectedGraphNode *&gt; nodes){}</code>
3. Link node with its neighbors  <code>void findNeighbors(vector&lt;UndirectedGraphNode *&gt; nodes){}</code></p>

<pre><code class="C++">/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector&lt;UndirectedGraphNode *&gt; neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
private:

    vector&lt;UndirectedGraphNode *&gt; findAllNodes(UndirectedGraphNode *node){

        //vector&lt;UndirectedGraphNode *&gt; res;
        queue&lt;UndirectedGraphNode *&gt; q;
        set&lt;UndirectedGraphNode *&gt; set;
        q.push(node);
        set.insert(node);

        while(q.size() != 0){
            UndirectedGraphNode *tmp = q.front(); q.pop();
            for(UndirectedGraphNode * n : tmp-&gt;neighbors){
                if(set.find(n) == set.end()){
                    q.push(n);
                    set.insert(n);
                }
            }
        }
        vector&lt;UndirectedGraphNode *&gt; res(set.begin(), set.end());
        return res;

    }

    unordered_map&lt;UndirectedGraphNode *, UndirectedGraphNode *&gt; map;

    void copyNodes(vector&lt;UndirectedGraphNode *&gt; &amp;nodes){
        for(UndirectedGraphNode* n : nodes){
            map[n] = new UndirectedGraphNode(n-&gt;label);
            //cout&lt;&lt;map[n]-&gt;label&lt;&lt;endl;
        }
    }

    void findNeighbors(vector&lt;UndirectedGraphNode *&gt; nodes){
        for(UndirectedGraphNode* nd:nodes){
            UndirectedGraphNode* newNode = map[nd];
            vector&lt;UndirectedGraphNode *&gt; neighbors = nd-&gt;neighbors;
            for(UndirectedGraphNode* n : neighbors){
                newNode-&gt;neighbors.push_back(map[n]);
            }
        }
    }
public:
    /**
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        if(node == NULL)
            return NULL;
        vector&lt;UndirectedGraphNode *&gt; nodes;
        //BFS find all nodes in the graph
        nodes = findAllNodes(node);
        //mapping old nodes to new nodes
        copyNodes(nodes);
        //link nodes
        findNeighbors(nodes);
        return map[node];

    }
};
</code></pre>

<p>problems that I met:<br/>
1. set. Using set can eliminate the visited nodes. Like 0&rsquo;s neighbor is 1 and 2, while 1&rsquo;s neighbor is 0 and 2. But the 0 and 2 is already found.
2. deep copy. Pay attention to the neighbors of old nodes and new nodes. <code>newNode-&gt;neighbors.push_back(map[n]);</code></p>

<p>There are other methods like recursion DFS, non-recursion DFS and using array instead of queue.</p>
]]></content>
  </entry>
  
</feed>
